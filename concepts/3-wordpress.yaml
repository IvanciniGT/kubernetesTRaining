kind:           PersistentVolume
apiVersion:     v1
metadata:
    name:       the-wordpress-volume

spec:
    capacity:
        storage: 1Gi
    storageClassName: slow   # Kind of storage
    accessModes:
        - ReadWriteOncePod # I want a volume for me. Don'0t share this volume with anybody else!
    # Right here below... is whhere they are going to supply the actual volume information
    hostPath: # In a real cluster we should use a different volume type... FOR SURE !!! 
        path: /home/ubuntu/environment/data/wp/app
        type: DirectoryOrCreate
    #awsVolume....
---
### THIS DOCUMENT is not going to be created by me... but by the cluster administrator!
# A persistent volume is not a physical volume... but a reference to a physical volume, previously created.
kind:           PersistentVolume
apiVersion:     v1
metadata:
    name:       the-database-volume

spec:
    capacity:
        storage: 15Gi
    storageClassName: fast   # Kind of storage
    accessModes:
        - ReadWriteOncePod # I want a volume for me. Don'0t share this volume with anybody else!
    # Right here below... is whhere they are going to supply the actual volume information
    hostPath: # In a real cluster we should use a different volume type... FOR SURE !!! 
        path: /home/ubuntu/environment/data/wp/mariadb
        type: DirectoryOrCreate
    #awsVolume....
    #fcVolume...
    #nfsVolume...
    # The sys administrator is going to install a volume provider... 
    # Which is a software that given a pvc creates a compliant pv, that Kb is going to assign to the pvc
---
# Kubernetes is going to match both objects: pv <> pvc
#If I go to an store and I ask for a 2 Tbs HDD... and they just have a 4 Tbs HDD...
---
kind:           PersistentVolumeClaim
apiVersion:     v1
metadata:
    name:       my-database-volume-claim

spec:
    resources:
        requests:
            storage: 10Gi
    storageClassName: fast   # Kind of storage
    accessModes:
        - ReadWriteOncePod # I want a volume for me. Don'0t share this volume with anybody else!
        #- ReadWriteOnce
        #- ReadWriteMany
        #- ReadOnlyMany
---
kind:           PersistentVolumeClaim
apiVersion:     v1
metadata:
    name:       my-wordpress-volume-claim

spec:
    resources:
        requests:
            storage: 1Gi
    storageClassName: slow   # Kind of storage
    accessModes:
        - ReadWriteOncePod # I want a volume for me. Don't share this volume with anybody else!
        #- ReadWriteOnce
        #- ReadWriteMany
        #- ReadOnlyMany
---
# Wordpress pod

kind:           Deployment
apiVersion:     apps/v1
metadata:
    name:       my-wp-deployment

spec:
    replicas: 2  # we can change that in the future with $ kubectl scale deployment my-wp-deployment -n MYNAMESPACE --replicas=5
    selector: 
        matchLabels:
            app:        wp
    template:
        metadata:
            labels:
                app:    wp
        spec:           
            volumes:
                -   name:   my-wp-volume
                    # Here we specify the volume type... incluidng its options
                    #hostPath: # In a real cluster we should use a different volume type... FOR SURE !!! 
                    #    path: /home/ubuntu/environment/data/wp/app
                    #    type: DirectoryOrCreate
                    persistentVolumeClaim:
                        claimName: my-wordpress-volume-claim
            containers:
                -   name:   container1
                    image:  wordpress:6.2-apache
                    #resources:
                    #    requests:
                    #        cpu:
                    #        memory:
                    #    limits:
                    #        cpu:
                    #        memory:
                    imagePullPolicy: IfNotPresent
                    volumeMounts:
                        -   name:       my-wp-volume
                            mountPath:  /var/www/html
                    env:
                        -   name:   WORDPRESS_DB_HOST
                            value:  db-service:3306
                        -   name:   WORDPRESS_DB_USER
                            valueFrom:  
                                configMapKeyRef:
                                    name: my-wp-configuration
                                    key:  username
                        -   name:   WORDPRESS_DB_PASSWORD
                            valueFrom:  
                                secretKeyRef:
                                    name: my-wp-secret-configuration
                                    key:  user_password
                        -   name:   WORDPRESS_DB_NAME
                            valueFrom:  
                                configMapKeyRef:
                                    name: my-wp-configuration
                                    key:  name_of_my_database

---
# Database Pod
kind:           Deployment
apiVersion:     apps/v1
metadata:
    name:       my-db-deployment
spec:           
    replicas:   1
    selector:
        matchLabels:
            app:    db
    template:
        metadata:
            labels:
                app:    db
        spec:           
            volumes:
                -   name:   my-db-volume
                    # Here we specify the volume type... incluidng its options
                    persistentVolumeClaim:
                        claimName: my-database-volume-claim
            containers:
                -   name:   container1
                    image:  mariadb:11.0
                    imagePullPolicy: IfNotPresent
                    volumeMounts:
                        -   name: my-db-volume
                            mountPath: /var/lib/mysql
                    env:
                        -   name:   MARIADB_ROOT_PASSWORD
                            valueFrom:  
                                secretKeyRef:
                                    name: my-wp-secret-configuration
                                    key:  root_user_password 
                        -   name:   MARIADB_DATABASE
                            valueFrom:  
                                configMapKeyRef:
                                    name: my-wp-configuration
                                    key:  name_of_my_database
                        -   name:   MARIADB_USER
                            valueFrom:  
                                configMapKeyRef:
                                    name: my-wp-configuration
                                    key:  username
                        -   name:   MARIADB_PASSWORD
                            valueFrom:  
                                secretKeyRef:
                                    name: my-wp-secret-configuration
                                    key:  user_password

---
# Database service
kind:           Service
apiVersion:     v1
metadata:   
    name:       db-service
spec:
    type:       ClusterIP
    ports:
        -   port:       3306
            targetPort: 3306
    selector:
        app:    db
---
# In order to expose wordpress functionality to the outside world, we have 3 options:
# - NodePort Service
# x LoadBalancer Service
# x ClusterIP + Thru an IngressController by setting an Ingress (rule)
kind:           Service
apiVersion:     v1
metadata:   
    name:       wp-service
spec:
    type:       NodePort
    ports:
        -   port:        80
            targetPort:  80
            nodePort: 30081
    selector:
        app:    wp
---
